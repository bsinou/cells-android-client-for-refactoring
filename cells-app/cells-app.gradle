apply plugin: 'com.android.application'

// Module main parameters 
def appID = "com.pydio.android.Client"
def appName = "Cells"

// TODO make this Windows compliant 
// def basePath = Paths.get($rootDir, project.name)
def basePath =  System.getProperty("user.dir") + "/" + project.name

// Retrieve version info
def versionProperties = new Properties();
def versionPath = basePath + "/version.properties"
versionProperties.load(new FileInputStream(rootProject.file(versionPath)));

// Generate static files from templates 
def generateStaticFiles (Properties versionProperties, String basePath, appName) {
        
    def versionName = versionProperties['version.name']
    def versionCode = versionProperties['version.code']
    def timestamp = new Date().format("yyyy.MM.dd")
    def year = new Date().format("yyyy")
    def templatePath = basePath + "/src/templates/about.html"
    def targetPath = basePath + "/src/main/assets/about.html";
    
    def body = new File(templatePath).getText('UTF-8')
    body = body.replaceAll("##APP_NAME##", appName)
    body = body.replaceAll("##VERSION_NAME##", versionName)
    body = body.replaceAll("##VERSION_CODE##", versionCode)
    body = body.replaceAll("##VERSION_DATE##", timestamp)
    body = body.replaceAll("##VERSION_YEAR##", year)
    def aboutFile = new File(targetPath)
    aboutFile.write(body)
}

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    def vName = versionProperties['version.name']
    def apkName = appName + "-" + vName + ".apk"

    defaultConfig {
        applicationId appID
        versionName vName
        versionCode versionProperties['version.code'] as int

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all {
                variant ->
                    variant.outputs.all {
                        outputFileName = apkName
                    }
            }
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all {
                variant ->
                    variant.outputs.all {
                        outputFileName = apkName
                    }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // TODO solve errors and get rid of this
    lintOptions {
        abortOnError false
    }

    generateStaticFiles(versionProperties, basePath, appName)
}


dependencies {

    // local external dependencies from libs subfolder, unused
    // implementation fileTree(dir: "libs", include: ["*.jar"])

    // Cells: the Java SDK and the Android Client
    implementation project(":sdk")
    implementation "com.pydio.cells:cells-sdk-java:${rootProject.ext.cellsSdkJavaLibVersion}"

    // AndroidX and JetPack to ship version 29+ code to older devices
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.annotation:annotation:1.1.0'

    // For the tests
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

/*

From Legacy Project
TODO Understand and adapt

 {
    ...
    def buildPropsFile = file('version.properties')
    if (buildPropsFile.canRead()) {


        buildTypes {
            release {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                applicationVariants.all {
                    variant ->
                        variant.outputs.all {
                            outputFileName = apkName
                        }
                }
            }
            debug {
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                applicationVariants.all {
                    variant ->
                        variant.outputs.all {
                            outputFileName = apkName
                        }
                }
            }
        }

        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/ASL2.0'
        }
    }


    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

*/